/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./js/components/form-elements/dropdown-block.js":
/*!*******************************************************!*\
  !*** ./js/components/form-elements/dropdown-block.js ***!
  \*******************************************************/
/***/ (() => {

eval("function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nvar Dropdown = /*#__PURE__*/function () {\n  function Dropdown(blocks) {\n    var _this = this;\n\n    _classCallCheck(this, Dropdown);\n\n    this.blocks = blocks;\n    this.setListener(this.blocks);\n    this.setOpenItems(this.blocks);\n    this.setBtnListeners(this.blocks);\n    this.guests = null;\n    this.adults = [\"гость\", \"гостя\", \"гостей\"];\n    this.newborns = [\"младенец\", \"младенца\", \"младенцев\"];\n    this.beds = [\"спальня\", \"спальни\", \"спален\"];\n    this.sofas = [\"кровать\", \"кровати\", \"кроватей\"];\n    this.baths = [\"ванна\", \"ванны\", \"ванн\"];\n    this.blocks.forEach(function (fullBlock) {\n      _this.removeCleanBtn(fullBlock, _this.checkUseBtn(fullBlock));\n    });\n    this.clear();\n  }\n\n  _createClass(Dropdown, [{\n    key: \"setListener\",\n    value: function setListener(items) {\n      var _this2 = this;\n\n      items.forEach(function (element) {\n        var top = _this2.findTopBlock(element);\n\n        top.addEventListener(\"click\", function (e) {\n          var selectionBlock = element.querySelector(\".selection\");\n          var currentHeight = selectionBlock.firstElementChild.clientHeight;\n\n          if (!element.classList.contains(\"active\")) {\n            selectionBlock.style.height = currentHeight + \"px\";\n          } else {\n            selectionBlock.style.height = 0 + \"px\";\n          }\n\n          element.classList.toggle(\"active\");\n        });\n      });\n    }\n  }, {\n    key: \"setOpenItems\",\n    value: function setOpenItems(items) {\n      items.forEach(function (element) {\n        var selectionBlock = element.querySelector(\".selection\");\n        var currentHeight = selectionBlock.firstElementChild.clientHeight;\n\n        if (element.classList.contains(\"active\")) {\n          selectionBlock.style.height = currentHeight + \"px\";\n        }\n      });\n    }\n  }, {\n    key: \"findTopBlock\",\n    value: function findTopBlock(element) {\n      for (var i = 0; i < element.children.length; i++) {\n        if (element.children[i].className.includes(\"top\")) {\n          return element.children[i];\n        }\n      }\n    }\n  }, {\n    key: \"setBtnListeners\",\n    value: function setBtnListeners(blocks) {\n      var _this3 = this;\n\n      blocks.forEach(function (block) {\n        if (block.querySelector(\".dropdown-block__option-nums\")) {\n          var nums = block.querySelectorAll(\".dropdown-block__option-nums\");\n          var standardTitle = block.querySelector(\".input-dropdown\").value;\n          nums.forEach(function (element) {\n            var minusBtn = element.querySelector(\"div:first-child\");\n            var plusBtn = element.querySelector(\"div:last-child\");\n            minusBtn.addEventListener(\"click\", function (e) {\n              _this3.changeNums(e.target, standardTitle);\n            });\n            plusBtn.addEventListener(\"click\", function (e) {\n              _this3.changeNums(e.target, standardTitle);\n\n              minusBtn.classList.remove(\"dropdown-block__disabled-btn\");\n            });\n          });\n        }\n      });\n    }\n  }, {\n    key: \"changeNums\",\n    value: function changeNums(item, sTitle) {\n      var parent = item.parentElement;\n      var text = parent.querySelector(\"span\");\n      var fullBlock = parent.closest(\".dropdown-block__dropdown\");\n      var title = fullBlock.querySelector(\".input-dropdown\");\n\n      if (item.innerText === \"+\") {\n        text.innerText = parseInt(text.innerText) + 1;\n      } else {\n        if (text.innerText != \"0\") text.innerText = parseInt(text.innerText) - 1;\n        if (text.innerText == \"0\") item.classList.add(\"dropdown-block__disabled-btn\");\n      }\n\n      this.removeCleanBtn(fullBlock, this.checkUseBtn(fullBlock));\n      title.value = this.getTitles(fullBlock, sTitle);\n    }\n  }, {\n    key: \"checkUseBtn\",\n    value: function checkUseBtn(parent) {\n      return parent.querySelector(\".dropdown-block__use.use\");\n    }\n  }, {\n    key: \"getTitles\",\n    value: function getTitles(block, sTitle) {\n      var _this4 = this;\n\n      var options = block.querySelectorAll(\".dropdown-block__option\");\n      var text = [];\n      var isEmpty = true;\n      this.guests = 0;\n      options.forEach(function (element) {\n        var guestTitle = element.querySelector(\"h3\").innerText.toLowerCase();\n        var guestNum = element.querySelector(\"span\").innerText;\n\n        if (guestTitle == \"взрослые\" || guestTitle == \"дети\") {\n          _this4.guests += parseInt(guestNum);\n        }\n      });\n      options.forEach(function (element) {\n        var title = element.querySelector(\"h3\").innerText.toLowerCase();\n        var num = element.querySelector(\"span\").innerText;\n\n        if (parseInt(num) != 0) {\n          if (title == \"взрослые\" || title == \"дети\") {\n            if (_this4.guests == 1) title = _this4.adults[0];else if (_this4.guests > 1 && _this4.guests < 5) title = _this4.adults[1];else title = _this4.adults[2];\n            num = _this4.guests;\n          } else if (title == \"младенцы\") {\n            if (num == 1) title = _this4.newborns[0];else if (num > 1 && num < 5) title = _this4.newborns[1];else title = _this4.newborns[2];\n          } else if (title == \"спальни\") {\n            if (num == 1) title = _this4.beds[0];else if (num > 1 && num < 5) title = _this4.beds[1];else title = _this4.beds[2];\n          } else if (title == \"кровати\") {\n            if (num == 1) title = _this4.sofas[0];else if (num > 1 && num < 5) title = _this4.sofas[1];else title = _this4.sofas[2];\n          } else if (title == \"ванные комнаты\") {\n            if (num == 1) title = _this4.baths[0];else if (num > 1 && num < 5) title = _this4.baths[1];else title = _this4.baths[2];\n          }\n\n          text.push(\"\".concat(num, \" \").concat(title));\n        }\n      });\n      options.forEach(function (element) {\n        var num = element.querySelector(\"span\").innerText;\n        if (num != 0) isEmpty = false;\n      });\n      if (isEmpty) text.push(sTitle);\n      text = text.filter(function (item, index, array) {\n        return array.indexOf(item) == index;\n      }).join(\", \");\n\n      if (text.length > 20) {\n        var newText = \"\";\n\n        for (var i = 0; i < 20; i++) {\n          newText += text[i];\n        }\n\n        return newText + \"...\";\n      } else return text;\n    }\n  }, {\n    key: \"removeCleanBtn\",\n    value: function removeCleanBtn(block, hasUseBtn) {\n      if (hasUseBtn) {\n        var cleanBtn = block.querySelector(\".dropdown-block__use.clean\");\n        var nums = block.querySelectorAll(\".dropdown-block__option-nums\");\n        var count = 0;\n        nums.forEach(function (element) {\n          var span = element.querySelector(\"span\");\n          if (span.innerText == \"0\") count += 1;\n        });\n\n        if (count == nums.length) {\n          cleanBtn.style.display = \"none\";\n        } else {\n          cleanBtn.style.display = \"block\";\n        }\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var cleanBtns = document.querySelectorAll(\".clean\");\n      cleanBtns.forEach(function (cleanBtn) {\n        cleanBtn.onclick = function (e) {\n          var parentBlock = this.closest(\".selection\");\n          var input = parentBlock.previousElementSibling.querySelector(\"input\");\n          var options = parentBlock.querySelectorAll(\".dropdown-block__option\");\n          options.forEach(function (option) {\n            var btnBlock = option.querySelector(\".dropdown-block__option-nums\");\n            var minusBtn = btnBlock.firstElementChild;\n            option.querySelector(\"span\").innerText = 0;\n            minusBtn.classList.add(\"dropdown-block__disabled-btn\");\n          });\n          cleanBtn.style.display = \"none\";\n          input.value = \"Сколько гостей\";\n        };\n      });\n    }\n  }]);\n\n  return Dropdown;\n}();\n\nvar dropdownAll = document.querySelectorAll(\".dropdown-block__dropdown\");\nnew Dropdown(dropdownAll);\nvar expandchecksAll = document.querySelectorAll(\".expand-checkbox\");\nnew Dropdown(expandchecksAll);\n\n//# sourceURL=webpack:///./js/components/form-elements/dropdown-block.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./js/components/form-elements/dropdown-block.js"]();
/******/ 	
/******/ })()
;